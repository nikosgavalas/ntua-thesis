import unittest
import os.path

import numpy as np

from adr.batch.gauss import MultivariateGaussian, suggest_threshold


class Test(unittest.TestCase):

    model = MultivariateGaussian()

    # get the path relative to this script
    dirname = os.path.dirname(__file__)
    X = np.loadtxt(os.path.join(dirname, '../../../data/tests/training_set.csv'))
    eval_dataset = np.loadtxt(os.path.join(dirname, '../../../data/tests/xval.csv'))
    labels = np.loadtxt(os.path.join(dirname, '../../../data/tests/yval.csv'))

    def test_0_training(self):
        self.model.fit(self.X)
        # we 're happy if no exceptions are thrown

    def test_1_probability_scores(self):
        # pass the eval dataset unlabeled
        actual = self.model.score(self.X)[:100]

        # np.set_printoptions(precision=100)
        #print(np.array2string(actual, separator=', '))

        # checking the first 100 only
        exp = np.array(
            [7.4339294646948249e-18, 3.1771996276799919e-18, 1.5300493157214150e-17,
             1.4555210919742379e-16, 3.4044018930982135e-18, 1.4618343970811748e-17,
             2.7867597161293727e-15, 2.8779742643179378e-18, 1.0904326473980464e-16,
             2.9976528175081842e-19, 1.0783948093548794e-17, 8.5054867520649773e-18,
             1.9804308422853346e-17, 7.0173095109049308e-17, 2.0569262563281386e-16,
             4.6859709296783747e-17, 5.7801206879460833e-16, 6.4862520730601981e-18,
             4.1749079313662639e-18, 6.2958344608375251e-18, 7.3496656248215753e-21,
             1.2928074186972383e-19, 1.3992344001117497e-18, 1.0686483308539718e-17,
             7.7630592810468395e-17, 4.7639100533650164e-17, 7.9429239578183580e-17,
             1.0186549989098125e-17, 1.3989628915707331e-18, 7.1497406063429102e-16,
             1.6192795183981848e-21, 7.2014860299586981e-16, 6.6999554905614639e-17,
             6.2763232682925027e-18, 5.4363919568184215e-17, 7.9716893099615562e-17,
             2.3529780083695726e-16, 6.5800078374916068e-17, 3.4496509912766766e-18,
             1.0053727234635853e-18, 9.3013297418782613e-16, 5.5172660237118731e-16,
             1.6870205793340633e-16, 6.1665819418003164e-18, 1.3176191563205340e-16,
             1.4153687637940117e-17, 1.9273170082015946e-18, 1.2587690178163287e-16,
             6.6735183696212868e-17, 2.0350308260420613e-16, 3.6962632523624986e-17,
             7.4630172488046758e-17, 2.9556805547388150e-18, 1.3285861153069322e-17,
             8.5590095135140523e-17, 7.4012639665398483e-18, 4.7312567502230105e-19,
             1.2376575488276835e-16, 1.7302980700444860e-18, 2.5335950267465519e-18,
             1.0867693442490928e-15, 4.5076406296023221e-17, 9.3159611455949860e-19,
             1.1553802079555309e-18, 1.0697404866683970e-16, 7.4787637809195530e-16,
             3.9482953153119522e-16, 3.3341960368804468e-17, 5.7771625166928259e-17,
             1.0513530208175968e-18, 1.2089391078883564e-18, 1.8868541309753874e-16,
             5.2867483998638001e-18, 2.2908729457645647e-16, 1.7284949513557245e-18,
             1.9230360536157563e-16, 2.5171352376180221e-16, 8.4094124898353113e-19,
             1.4428387063747213e-16, 9.7449012268007836e-23, 2.4384782877306273e-17,
             1.5881401813632947e-16, 3.1794965685533070e-18, 3.0308907057142466e-17,
             3.9564745987669358e-17, 2.1997018842238998e-17, 7.8945455012534867e-19,
             3.5967854943094594e-16, 2.2038405554702870e-16, 5.8384889308390181e-17,
             1.9919464465254364e-16, 2.4857724453803930e-16, 4.5650625657714047e-17,
             2.3863118727696631e-17, 2.3114709110688873e-17, 3.1207004568145274e-18,
             1.2614517452481291e-16, 1.6737043167009872e-16, 1.8293761537881143e-16,
             6.9542911294800387e-16]
        )

        self.assertTrue(np.array_equal(actual, exp))

    def test_3_predict(self):
        probs = self.model.score(self.X)[:100]
        actual = self.model.predict(probs, threshold=1e-18)[:100]

        exp = np.array(
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
        )

        self.assertTrue(np.array_equal(actual, exp))

    # prints a warning, it is normal.
    def test_4_find_optimal_threshold(self):
        optim_lin = suggest_threshold(self.model, self.eval_dataset, self.labels)

        self.assertEqual(optim_lin, 1.378607498200024e-18)


if __name__ == "__main__":
    unittest.main()
